#include <atomic>
#include "queue.hpp"
#include "bloomfilter.hpp"
#include "qstm.hpp"

qEntry::qEntry(){
	ts = 0;
	st = State::Writing;
	next.store(nullptr);
}

uint64_t qEntry::get_birth(){
	return ts;
}

qEntry::~qEntry(){
	delete(wset_p);
	fset_p->do_frees();
	delete(fset_p);
}

queue_t::queue_t(){
	head = new qEntry();
	head.load()->st = State::Complete; // Needed so that dummy entry doesn't trigger write attempts
	head.load()->wset_p = new writesetQSTM(); // Needed so that free of dummy doesn't segfault
	head.load()->fset_p = new freeset(); // Needed so that free of dummy doesn't segfault
	tail = head.load();
	complete = head.load();

#ifdef DUR_LIN
	FLUSH(&head);
	FLUSH(&complete);
	FLUSH(&tail);
	FLUSH(head); // Flush dummy entry
	FLUSH(&head.load()->next); // Flush dummy entry
	head.load()->wset_p->flush(); // Flush dummy entry
	head.load()->fset_p->flush(); // Flush dummy entry
	FLUSHFENCE;
#endif

}

// Tries to add a queue qEntry until it succeeds
void queue_t::enqueue(qEntry *foo){
	bool success = false;

	do{
		qEntry *oldtail = tail.load();
		qEntry *oldlast = oldtail->next.load();
		if(oldlast == nullptr){
			success = tail.load()->next.compare_exchange_strong(oldlast, foo, std::memory_order_seq_cst);
			if(success){ // Fix the tail
				tail.compare_exchange_strong(oldtail, foo, std::memory_order_seq_cst);
			}
		}else{ // Tail was not fixed by earlier operation
			tail.compare_exchange_strong(oldtail, oldlast, std::memory_order_seq_cst);
		}
	}while(!success);
	return;
}

// Dequeues an qEntry and returns a pointer to it
qEntry * queue_t::dequeue(){
	bool success = false;
	qEntry *mine;
	qEntry *dummy;
	do{
		mine = head.load(); // Never nullptr, if no bugs
		dummy = mine->next.load(); // nullptr if queue is empty
		if(dummy !=nullptr){
			success = head.compare_exchange_strong(mine, dummy, std::memory_order_seq_cst);
		}else return nullptr;
	}while(!success);
	return mine;
}

// Dequeues a batch of cnt_ui qEntries, or (x<cnt_ui entries until until_ts, and set_cnt_ui
// to the actual number of entries dequeued).
// If cnt_ui=0, then the restriction will just be until_ts.
qEntry* queue_t::dequeue_until(unsigned long until_ts, unsigned long& cnt_ui){
	bool success = false;
	qEntry *oldhead;
	qEntry *dummy, *new_dummy;
	unsigned long cnt;

	do{	
		cnt = (cnt_ui? cnt_ui : ULONG_MAX);
		dummy = oldhead = head.load();
		for (unsigned long i = 0; i < cnt; i++){
			new_dummy = dummy->next.load();
			if (new_dummy == nullptr || new_dummy->ts >= until_ts){//we're keeping the last completed node here.
				cnt = i;
				break;
			}
			dummy = new_dummy;
		}
		success = head.compare_exchange_strong(oldhead, dummy, std::memory_order_seq_cst);
	}while(!success);

	cnt_ui = cnt;
	return oldhead;
}